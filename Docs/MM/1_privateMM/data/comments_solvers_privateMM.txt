Timestamp	Please, enter your handle	Can you describe the use of the original banner code (or the ideas from it) in your solution?	What is your estimate for the efficiency of your solution in comparison to the original one?	If you were to participate in a full-length MM match, what score do you believe you could achieve?	Do you had enough time to come up with good solutions?  If not, what was the most time consuming activity?	Do you have any suggestion to improve the PS for a full-length MM contest?	If the prize award was 2x (doubled) how would your number of hours spent solving the problem have changed?	If the prize award was 0.5x (halved) how would your number of hours spent solving the problem have changed?	How important was your prior knowledge of Java programming language to progress in the challenge?	Other comments, if any.
2/18/2015 16:45:42	nofto	I did not use the code nor ideas from it. In fact, I did not even look inside the code. However, I used the result from the BannerAnnotate.java file wich was generated with the provided code. My solution is based on a specific combination of my own result and the banner result.	My estimate is the same as reflected in the ranking: The original solution got 800K, my solution earned around 820K.	Very hard to say. Probably at least 830K. Maybe 850K or even more if some of the approaches would work well.	I did not have enough time. Since I decided not to use the provided code and worked on my own code, the most time consuming activity was setting the structures for the data and reading the XML files properly. I spent a lot of time also by investigating the data (and extracting various statistics), to get a better feeling what the problem is about. 	Nothing crucial, it was pretty clear. But you should warn the coders that HTML-entities in XML files should be treated as single characters in the code (concerning offset and length). I found out only 1 hour before the deadline  that my parser and the banner code interpret &lt; and &amp; differently.	3	5	Well, in fact, I decided not to use the banner code mainly because I do not have a lot of experience with Java. I was even not able to run the software on my machine and I had no time to get over it. So, to truly answer the stated question, I must say that for *my* progress, the knowledge of Java was not important at all. Maybe the better answer is that my *lack of knowledge* of Java was very important, because I would probably chose different strategy with more Java experience :).	Changing the time between submission from 2 hours to 1 minute was very helpful at the end. I only finished my basic code on Tuesday and I needed several submissions to find out what combination of my result and the banner result is the best. 
2/18/2015 17:05:25	tamas.kenez	"I didn't try to replace or modify the original banner code which seemed a complex and mature tool.
Instead, I wrote a C++ program with similar functionality like supplied crowd_words app. That is, a merger program which takes a number of expert and turk annotated bioc files and outputs a cleaned-up, merged version of the input data. It works by estimating the reliability of the turks and the annotations. The merged bioc file will be the input of the banner."	The original one was not able to handle multiple, expert and mturk sources. My solution was able to improve the provisional score from 794k to 817k.	10-20k more.	I didn't have enough time. It took 1-2 days of studying the materials until I figured out where to start. After that, the most time consuming was that in order to test any idea I had to run the merged bioc,xml through the banner which took 1-2 hrs. I should have studied the banner algorithm to get some idea about what is a good input for banner and what exactly happens inside it.	Maybe more detailed instructions on how to use the programs in the crowd_words directory.	1	1	Was not important, I don't know Java but figured out what I needed.	The example test was not useful at all, maybe only for smoke-testing. It was too small and did not correlated well with the actual scores.
2/19/2015 2:45:55	kphmd	"In CRFTagger.train(), CRFTrainerByLabelLikelihood.train() to convergence.

Step 1. Use ncbi_train_bioc.xml to get model_1, then get result_1.
Step 2. newpubmed_e12_13_bioc.xml is converted to get ncbi_train_bioc_crowd.xml by org.scripps.crowdwords.TestSimpleTrain
Step 3. Use ncbi_train_bioc_crowd.xml to get model_2, then get result_2.
Step 4. 
    for each res2 in result_2
        if res2 is not overlap with result_1, then
            result_1.add(res2)
        end if
    end for"	If crowd_words' model can give more correctly results which expert's model  can not give, then my solution is better than original one.	If it is a full-length MM match, I will get a score more than current score.	"Time is very tight to come up with good solutions.
Train to convergence is time-consuming."	Small fragments of xml files can be writed in problem statement, because of current xml file is  more than 1.7MB which is too large to opened by default software, like Internet Explorer. 	5	5	It is very important that my prior knowledge of Java programming language to progress in the challenge.	
2/19/2015 21:06:23	wleite	"I used BANNER as provided. Just made 3 minor changes in training implementation (CRFTagger):
- Enable Multi-Threading to speed things up.
- Disable sparse weights option.
- Add extra training steps to guarantee convergence.
"	Considering provisional score, it improved from 80.5% f-measure to 83.3%. My final score was a bit lower, probably due to over fitting parameters to provisional cases.	It is hard to say, but my guess would be something between 85-88%.	I think so. Of course, with more time, different ideas could be explored. It took me a lot of time to understand what all the given files are.	"I think it is fine.
Maybe using more simple file names (for example: expert1.xml, mturk1.xml, mturk2.xml) would help a little bit. 
Probably I was too tired when started working in the problem :-)"	3	2	"Only very basic knowledge was required to understand how provide programs work. 
Changing them wasn't really a good idea, at least for me.
I prefer writing from the scratch (or use them almost as they were, in case of BANNER). 
Therefore, although Java is my preferred language, I think it didn't help that much in this match.
"	"- Interesting problem overall.
- Time was too short, given all the information involved.
- Looking the final outcome (test file annotations), my feeling was that the solution could be better. There are a lot of clear mistakes that seemed to be avoidable. Probably writing everything from the scratch could be better, but I discarded this option because it would be a huge task for only 3 or 4 days.
"